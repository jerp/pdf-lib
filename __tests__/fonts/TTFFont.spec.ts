import { name } from 'fonts/tables/required'
import { TTFFont } from 'fonts/TTFFont'
import { readFileSync } from 'fs'

const testFontFile = (fontFile) => readFileSync(`test-fonts/${fontFile}`)

describe('TTFFont', () => {
  describe('Parses Mini Font', () => {
    const fontBuffer = testFontFile('CharisSIL-abc.ttf')
    const fontData = new Uint8Array(fontBuffer)
    const font = new TTFFont(fontData)
    it('parses head', () => {
      expect(font.head.version).toBe(1)
      expect(font.head.fontRevision).toBe(5)
      expect(font.head.checkSumAdjustment).toBe(400097939)
      expect(font.head.magicNumber).toBe(1594834165)
      expect(font.head.flags).toBe(25)
      expect(font.head.unitsPerEm).toBe(2048)
      expect(font.head.xMin).toBe(29)
      expect(font.head.yMin).toBe(-25)
      expect(font.head.xMax).toBe(1300)
      expect(font.head.yMax).toBe(1800)
      expect(font.head.macStyle).toBe(0)
      expect(font.head.lowestRecPPEM).toBe(9)
      expect(font.head.fontDirectionHint).toBe(2)
      expect(font.head.indexToLocFormat).toBe(0)
      expect(font.head.glyphDataFormat).toBe(0)
    })
    it('parses name', () => {
      expect(font.name.get('fontFamily')).toEqual('Charis SIL')
      expect(font.name.get('fullName')).toEqual('Charis SIL')
      expect(font.name.get('fontSubfamily')).toEqual('Regular')
      expect(font.name.get('postScriptName')).toEqual('CharisSIL')
      expect(font.name.get('uniqueID')).toEqual('SILInternational: Charis SIL: 2014')
    })
    it('parses hhea', () => {
      expect(font.hhea.version).toEqual(1)
      expect(font.hhea.ascent).toEqual(2450)
      expect(font.hhea.descent).toEqual(-900)
      expect(font.hhea.lineGap).toEqual(0)
      expect(font.hhea.advanceWidthMax).toEqual(1400)
      expect(font.hhea.minLeftSideBearing).toEqual(29)
      expect(font.hhea.minRightSideBearing).toEqual(34)
      expect(font.hhea.xMaxExtent).toEqual(1300)
      expect(font.hhea.metricDataFormat).toEqual(0)
      expect(font.hhea.numberOfHMetrics).toEqual(4)
    })
    it('parses maxp', () => {
      expect(font.maxp.version).toBe(1)
      expect(font.maxp.numGlyphs).toBe(4)
      expect(font.maxp.maxPoints).toBe(67)
      expect(font.maxp.maxContours).toBe(2)
      expect(font.maxp.maxComponentPoints).toBe(0)
      expect(font.maxp.maxComponentContours).toBe(0)
      expect(font.maxp.maxZones).toBe(1)
      expect(font.maxp.maxTwilightPoints).toBe(0)
      expect(font.maxp.maxStorage).toBe(0)
      expect(font.maxp.maxFunctionDefs).toBe(10)
      expect(font.maxp.maxInstructionDefs).toBe(0)
      expect(font.maxp.maxStackElements).toBe(512)
      expect(font.maxp.maxSizeOfInstructions).toBe(371)
      expect(font.maxp.maxComponentElements).toBe(0)
      expect(font.maxp.maxComponentDepth).toBe(0)
    })
    it('parses post', () => {
      expect(font.post.version).toBe(2)
      expect(font.post.italicAngle).toBe(0)
      expect(font.post.underlinePosition).toBe(-290)
      expect(font.post.underlineThickness).toBe(120)
      expect(font.post.isFixedPitch).toBe(0)
      expect(font.post.minMemType42).toBe(0)
      expect(font.post.maxMemType42).toBe(0)
      expect(font.post.minMemType1).toBe(0)
      expect(font.post.maxMemType1).toBe(4)
      expect(font.post.glyphNameIndex && font.post.glyphNameIndex.length).toBe(4)
      // @ts-ignore
      expect(font.post.glyphNameIndex.get(0)).toBe(0)
      // @ts-ignore
      expect(font.post.glyphNameIndex.get(1)).toBe(68)
      // @ts-ignore
      expect(font.post.glyphNameIndex.get(2)).toBe(69)
      // @ts-ignore
      expect(font.post.glyphNameIndex.get(3)).toBe(70)
      expect(font.post.names.length).toBe(258)
    })
    it('parses cvt', () => {
      const controlValues = [42,98,104,184,215,0,33,-446,23,987,25,1374,33]
      expect(font.cvt.controlValues.length).toBe(controlValues.length)
      controlValues.forEach((v, i) => {
        expect(font.cvt.controlValues.get(i)).toBe(v)
      })
    })
    it('parses hmtx', () => {
      expect(font.hmtx.advanceWidth(0)).toBe(1400)
      expect(font.hmtx.advanceWidth(1)).toBe(1042)
      expect(font.hmtx.advanceWidth(3)).toBe(954)
      expect(font.hmtx.leftSideBearing(0)).toBe(100)
      expect(font.hmtx.leftSideBearing(1)).toBe(70)
      expect(font.hmtx.leftSideBearing(2)).toBe(29)
      expect(font.hmtx.leftSideBearing(3)).toBe(70)
      expect(font.hmtx.advanceWidth(4)).toBe(font.hmtx.advanceWidth(3))
      expect(font.hmtx.advanceWidth(100)).toBe(font.hmtx.advanceWidth(3))
    })
    it('parses cmap', () => {
      expect(font.cmap.get(0)).toBe(0)
      expect(font.cmap.get(96)).toBe(0)
      expect(font.cmap.get(97)).toBe(1)
      expect(font.cmap.get(98)).toBe(2)
      expect(font.cmap.get(99)).toBe(3)
      expect(font.cmap.get(100)).toBe(0)
    })
    it('parses loca', () => {
      expect(font.loca.get(0)).toBe(0)
      expect(font.loca.get(1)).toBe(58)
      expect(font.loca.get(2)).toBe(330)
      expect(font.loca.get(3)).toBe(536)
      expect(font.loca.get(4)).toBe(778)
      expect(font.loca.length).toEqual(5)
    })
    it('parses fpgm', () => {
      expect(font.fpgm.instructions && font.fpgm.instructions.length).toBe(371)
      expect(font.fpgm.instructions[0]).toBe(184)
    })
    it('parses prep', () => {
      expect(font.prep.controlValueProgram && font.prep.controlValueProgram.length).toBe(114)
      expect(font.prep.controlValueProgram[0]).toBe(184)
    })
    it('parses glyf', () => {
      expect(font.glyf.getGlyfData(0).length/2).toBe(58-0)
      expect(font.glyf.getGlyfData(1).length/2).toBe(330-58)
      expect(font.glyf.getGlyfData(2).length/2).toBe(536-330)
      expect(font.glyf.getGlyfData(3).length/2).toBe(778-536)
      expect(font.glyf.length).toEqual(4)
    })
    it('parses OS/2', () => {
      expect(font.os2.version).toBe(4)
      expect(font.os2.xAvgCharWidth).toBe(1133)
      expect(font.os2.usWeightClass).toBe(400)
      expect(font.os2.usWidthClass).toBe(5)
      expect(font.os2.fsType).toBe(0)
      expect(font.os2.ySubscriptXSize).toBe(1331)
      expect(font.os2.ySubscriptYSize).toBe(1229)
      expect(font.os2.ySubscriptXOffset).toBe(5)
      expect(font.os2.ySubscriptYOffset).toBe(460)
      expect(font.os2.ySuperscriptXSize).toBe(1331)
      expect(font.os2.ySuperscriptYSize).toBe(1229)
      expect(font.os2.ySuperscriptXOffset).toBe(5)
      expect(font.os2.ySuperscriptYOffset).toBe(785)
      expect(font.os2.yStrikeoutSize).toBe(100)
      expect(font.os2.yStrikeoutPosition).toBe(500)
      expect(font.os2.sFamilyClass).toBe(0)
      expect(font.os2.panose.bytes).toMatchObject(new Uint8Array([2,0,5,0,6,0,0,2,0,4]))
      expect(font.os2.ulUnicodeRange.get(0)).toBe(2684355327-0xffffffff-1)
      expect(font.os2.ulUnicodeRange.get(1)).toBe(268435456)
      expect(font.os2.ulUnicodeRange.get(2)).toBe(33554473)
      expect(font.os2.ulUnicodeRange.get(3)).toBe(0)
      expect(font.os2.achVendID).toBe('SIL ')
      expect(font.os2.fsSelection).toBe(64)
      expect(font.os2.usFirstCharIndex).toBe(97)
      expect(font.os2.usLastCharIndex).toBe(99)
      expect(font.os2.sTypoAscender).toBe(2450)
      expect(font.os2.sTypoDescender).toBe(-900)
      expect(font.os2.sTypoLineGap).toBe(0)
      expect(font.os2.usWinAscent).toBe(2450)
      expect(font.os2.usWinDescent).toBe(900)
      expect(font.os2.ulCodePageRange.get(0)).toBe(536871319)
      expect(font.os2.ulCodePageRange.get(1)).toBe(0)
      expect(font.os2.sxHeight).toBe(987)
      expect(font.os2.sCapHeight).toBe(1374)
      expect(font.os2.usDefaultChar).toBe(0)
      expect(font.os2.usBreakChar).toBe(32)
      expect(font.os2.usMaxContent).toBe(7)
    })
  })
})