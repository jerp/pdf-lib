// Simple Stream Encoder base on ArrayBuffer
// inspiered by https://github.com/foliojs/restructure/blob/master/src/StreamEncoder.coffee
// make this based on ArrayBuffer rather than Buffer
import { Uint16View, Uint32View } from 'fonts/DataStream/views'

export class StreamEncoder {
  private chunkLength: number = 65536
  private view: DataView
  offset: number = 0
  private buffer: ArrayBuffer
  private data: Uint8Array

  constructor(chunkLength?: number) {
    this.chunkLength = chunkLength ? chunkLength : 65536;
    this.initBuffer(this.chunkLength)
  }

  // Int32
  // Int32
  // Float32
  // 3 bytes number
  // Float64
  // bytes
  // bytes
  reserve(length, viewClass) {
    this.ensure(byteLength)
    this.offset += byteLength
  }
  // strings
  // api
  getBytes(): Uint8Array {
    return this.data.subarray(0, this.offset)
  }
  private initBuffer(byteLength: number) {
    this.buffer = new ArrayBuffer(byteLength)
    this.data = new Uint8Array(this.buffer)
    this.view = new DataView(this.buffer)
  }
  private ensure(byteLength: number) {
    if ((this.offset + byteLength) > this.buffer.byteLength) {
      const currData = this.data
      // makes sure there is enough room for this and a bit more
      this.initBuffer(this.data.byteLength + this.chunkLength + byteLength)
      this.data.set(currData, 0)
    }
  }
}